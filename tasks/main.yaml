---

- include_vars: "../vars/python{{ ansible_python.version.major }}.yaml"

- include: "pre-flight.yaml"

- name: Create configuration directory
  file:
    path: "{{ tplc_traefik_config_dir }}"
    state: directory
    owner: "{{ tplc_traefik_config_dir_owner }}"
    group: "{{ tplc_traefik_config_dir_group }}"
    mode: "{{ tplc_traefik_config_dir_mode }}"

- name: Create temporary file
  tempfile:
    state: file
  register: tplc_tempfile
  changed_when: false

- name: Generate password hash for the dashboard user
  htpasswd:
    path: "{{ tplc_tempfile.path }}"
    name: "{{ tplc_dashboard_username }}"
    password: "{{ tplc_dashboard_password }}"
    mode: "0600"
  changed_when: false

# Hacking the salted hash (part 1):
# The hash salt changes on each run, regardless of actual change of the password
# In order to stay idempotent, we try to connect with the 'new' credentials
# We store the status code for the next task
- name: Check our dashboard credentials
  uri:
    url: "https://{{ tplc_traefik_container_name }}.{{ tplc_domain_name }}"
    url_username: "{{ tplc_dashboard_username }}"
    url_password: "{{ tplc_dashboard_password }}"
    status_code: [ 200, 401 ]
    validate_certs: false
  register: credential_check

# Hacking the salted hash (part 2):
# If the site returned a status=401, it means that the password has changed and needs to be enforced
#   Nothing needs to be done, as the new hash is in the temp file and will be put into the new configuration
# If ww successfully logged in (status=200), it is likely that the credentials on file are ok
#   This ugly shell snippet then grabs the hash from the current file and overwrites the hash gnerated above
- name: grab current password
  shell: >
    awk -F'"' '/^ *users =/ { print $2 }' {{ tplc_traefik_config_file }}
    > {{ tplc_tempfile.path }}
  when: credential_check.status == 200
  changed_when: false

- name: Read the credentials
  command: "head -n1 {{ tplc_tempfile.path }}"
  register: tplc_credentials
  changed_when: false

- name: Cleanup temp file
  file:
    path: "{{ tplc_tempfile.path }}"
    state: "absent"
  changed_when: false

- name: Create configuration file
  template:
    src: "traefik.toml.j2"
    dest: "{{ tplc_traefik_config_file }}"
    owner: "{{ tplc_traefik_config_file_owner }}"
    group: "{{ tplc_traefik_config_file_group }}"
    mode: "{{ tplc_traefik_config_file_mode }}"
  register: tplc_traefic_config_state

- name: "Create default ssl certificate for traefik: Generate the private key"
  openssl_privatekey:
    path: "{{ tplc_traefik_default_sslkey }}"

- name: "Create default ssl certificate for traefik: Generate the certificate signing request (CSR)"
  openssl_csr:
    path: "{{ tplc_traefik_default_sslcsr }}"
    privatekey_path: "{{ tplc_traefik_default_sslkey }}"
    common_name: "default.site"

- name: "Create default ssl certificate for traefik: Generate the self-signed certificate"
  openssl_certificate:
    provider: selfsigned
    path: "{{ tplc_traefik_default_sslcert }}"
    csr_path: "{{ tplc_traefik_default_sslcsr }}"
    privatekey_path: "{{ tplc_traefik_default_sslkey }}"
    ownca_not_after: "+3650d"

- name: Create certificates directory
  file:
    path: "{{ tplc_acme_certs_dir }}"
    state: "directory"
    owner: "{{ tplc_acme_certs_dir_owner }}"
    group: "{{ tplc_acme_certs_dir_group }}"
    mode: "{{ tplc_acme_certs_dir_mode }}"

- name: Create certificates file
  file:
    path: "{{ tplc_acme_certs_file }}"
    state: touch
    owner: "{{ tplc_acme_certs_file_owner }}"
    group: "{{ tplc_acme_certs_file_group }}"
    mode:  "{{ tplc_acme_certs_file_mode }}"
  changed_when: false

- name: Run traefik container
  docker_container:
    name: "{{ tplc_traefik_container_name }}"
    image: "{{ tplc_traefik_image_name }}:{{ tplc_traefik_image_tag }}"
    published_ports:
      - "{{ tplc_traefik_port_http }}:{{ tplc_traefik_container_port_http }}"
      - "{{ tplc_traefik_port_https }}:{{ tplc_traefik_container_port_https }}"
    volumes:
      - "{{ tplc_acme_certs_file }}:{{ tplc_traefik_container_certs_file }}:rw"
      - "{{ tplc_traefik_config_file }}:{{ tplc_traefik_container_config_file }}:ro"
      - "{{ tplc_traefik_default_sslcert }}:{{ tplc_traefik_container_default_sslcert }}:ro"
      - "{{ tplc_traefik_default_sslkey }}:{{ tplc_traefik_container_default_sslkey }}:ro"
      - "{{ tplc_docker_socket }}:{{ tplc_traefik_container_docker_socket }}:rw"
    labels:
      traefik.frontend.rule: "Host:{{ tplc_traefik_container_name }}.{{ tplc_domain_name }}"
      traefik.port: "{{ tplc_traefik_container_dashboard_port }}"
    state: "started"
    restart: "{{ tplc_traefic_config_state.changed }}"
